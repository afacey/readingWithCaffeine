{"version":3,"sources":["components/Header.js","components/Instructions.js","api/index.js","actions/libraryActions.js","actions/types.js","components/Form.js","components/Footer.js","components/CoffeeShopsList.js","components/Directions.js","components/Results.js","helpers/index.js","App.js","serviceWorker.js","reducers/libraryReducer.js","reducers/coffeeShopsReducer.js","reducers/directionsReducer.js","reducers/index.js","store/store.js","index.js"],"names":["Header","className","Instructions","getRadiusMap","coffeeShops","latitude","longitude","radius","coffeeShopCords","reduce","cordsString","coffeeShop","index","place","geometry","coordinates","libraryMarker","getCoffeeShops","location","dispatch","axios","url","params","key","circle","sort","q","pageSize","api","then","response","returnedCoffeeShops","data","results","length","Swal","fire","title","text","icon","confirmButtonText","randomCoffeeShops","i","compareIndex","Math","floor","random","temp","splice","type","payload","list","map","catch","error","Form","handleLibraryInputChange","event","state","showSuggestions","setState","libraryInput","target","value","getPredictiveSearch","handleRadiusSelected","selectedRadius","input","collection","res","autoComplete","handleFormSubmit","preventDefault","selectedLibrary","library","props","handleLibraryInputSelected","userSelectedLibrary","filter","item","name","this","id","action","htmlFor","onChange","placeholder","onClick","min","max","required","Component","connect","Footer","href","handleCoffeeShopSelected","properties","street","directions","handleBackButton","aria-hidden","src","alt","mode","e","instructions","direction","Results","displayDirections","selectedLocationId","currentTarget","selectedLocation","locationObj","locationListItem","JSON","stringify","selectedCoffeeShop","getSelectedTransportation","a","modeType","from","to","routeType","scalebar","size","route","legs","maneuvers","directionsToCoffeeShop","narrative","directionsSessionID","sessionId","session","isLoading","prevProps","arr1","arr2","Array","isArray","arraysAreEqual","document","querySelector","scrollIntoView","radiusMap","directionsMap","onLoad","App","Boolean","window","hostname","match","initialState","libraryReducer","coffeeShopsReducer","directionsReducer","rootReducer","combineReducers","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.5949fcd4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return (\n    <header>\n      <div className='wrapper headerFlex'>\n        <h1>Reading With<span className='caffeine animate__animated animate__bounceIn'>Caffeine</span></h1>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Instructions = () => {\n    return (\n        <section className='instructionsSection'>\n            <h2>Instructions</h2>\n            <p>Picking up books from your local library? Use this tool to locate a coffee shop nearby where you can relax and read in peace.</p>\n            <p>1. Enter your library and set preferred distance.</p>\n            <p>2. A map will appear with a list of 10 coffee shops around the library.</p>\n            <p>3. Select your preferred coffee shop from the list and choose a mode of transportation to get directions.</p>\n        </section>\n    )\n};\n\nexport default Instructions;","import axios from 'axios';\n\n// make api call to get prective search of user's search input\nexport const getPredictiveSearch = input => {\n\n  if (input.length >= 3 && input.length < 25) {\n    const apiKey = 'dgYN9vqDVgOBOwNtvPlR14jKSxdi9dVa';\n\n    // make axios call to get autoComplete text of the user's input\n    return axios({\n      url: 'https://www.mapquestapi.com/search/v3/prediction',\n      params: {\n        q: input,\n        collection: 'poi',\n        key: apiKey,\n      },\n    })\n  }\n}\n\nexport const getCoffeeShops = (location) => {\n  const apiKey = 'dgYN9vqDVgOBOwNtvPlR14jKSxdi9dVa';\n  const urlSearch = 'https://www.mapquestapi.com/search/v4/place';\n\n  // make api call providing selectedLibrary longitude and latitude with query of Coffee Shops\n  // to find the surrounding coffee shops of the selected library\n  return axios({\n    url: urlSearch,\n    params: {\n      key: apiKey,\n      circle: `${location.longitude},${location.latitude},${location.radius * 1000}`,\n      sort: 'relevance',\n      q: 'Coffee Shop',\n      pageSize: 50,\n    },\n  })\n}\n\n // getting directions from the selectedLibrary to the selectedCoffeeShop\nexport const getSelectedTransportation = (library, coffeeShop, mode) => {\n  const apiKey = 'dgYN9vqDVgOBOwNtvPlR14jKSxdi9dVa';\n\n  // api request to grab directions from the selectedLibrary to the selectedCoffeeShop\n  return axios({\n    url: 'https://www.mapquestapi.com/directions/v2/route',\n    params: {\n      key: apiKey,\n      from: `${library.latitude},${library.longitude}`,\n      to: `${coffeeShop.latitude},${coffeeShop.longitude}`,\n      routeType: mode,\n      scalebar: 'true|bottom',\n      size: '600,600',\n      type: 'light',\n    }\n  })\n}\n\nexport const getRadiusMap = ({latitude, longitude, radius}, coffeeShops) => {\n  // reduce stored coffeeShops to a coordinates string needed for the static map API call\n  // ex. ['43.653427,-79.380764|marker-md-1|', '43.650378,-79.380355|marker-md-2|']\n  const coffeeShopCords = coffeeShops.reduce((cordsString, coffeeShop, index) => {\n    const [longitude, latitude] = coffeeShop.place.geometry.coordinates;\n    cordsString += `${latitude},${longitude}|marker-md-${index + 1}||`; \n    \n    return cordsString\n  }, \"\")\n  \n  // construct the selectedLibrary marker's string\n  const libraryMarker = `${latitude},${longitude}|marker-md-350482||`;\n  \n  // store the static map url to update the displayedMap in state\n  const apiKey = 'dgYN9vqDVgOBOwNtvPlR14jKSxdi9dVa';\n  return `https://www.mapquestapi.com/staticmap/v5/map?key=${apiKey}&scalebar=true|bottom&locations=${libraryMarker}${coffeeShopCords}&size=500,600&type=light&shape=radius:${radius}km|${latitude},${longitude}`;\n\n}\n\nexport const getDirectionsMap = session => {\n  const apiKey = 'dgYN9vqDVgOBOwNtvPlR14jKSxdi9dVa';\n  return `https://www.mapquestapi.com/staticmap/v5/map?session=${session}&key=${apiKey}&scalebar=true|bottom&size=500,600&type=light&traffic=flow|cons|inc`;\n}","import Swal from 'sweetalert2';\nimport * as api from '../api';\n\nimport { GET_COFFEE_SHOPS } from './types';\n\n // getting surrounding coffee shops of the selected library and storing them in state\nexport const getCoffeeShops = (location) => dispatch => {\n  \n  api.getCoffeeShops(location)\n    .then((response) => {\n      // store returned results for later\n      const returnedCoffeeShops = response.data.results;\n\n      // if no results are returned then display an alert\n      if (returnedCoffeeShops.length === 0) {\n        Swal.fire({\n          title: 'No results',\n          text: 'Try another search please',\n          icon: 'warning',\n          confirmButtonText: 'Okay.',\n        })\n      } else {\n        // creating a copy of the array to randomize and reduce to 10\n        let randomCoffeeShops = [...returnedCoffeeShops]\n\n        // standard fisher-yates randomizer to randomize entire array and prevent duplicates\n        for (let i = randomCoffeeShops.length - 1; i > 0; i--) {\n          const compareIndex = Math.floor(Math.random() * (i + 1));\n          let temp = randomCoffeeShops[i];\n          randomCoffeeShops[i] = randomCoffeeShops[compareIndex];\n          randomCoffeeShops[compareIndex] = temp;\n        }\n\n        // to reduce array to 10 shops -- removing everything from index 10 and beyond\n        randomCoffeeShops.splice(10);\n\n        // store the randomCoffeeShops in state, and then display them\n        dispatch({\n          type: GET_COFFEE_SHOPS,\n          payload: {\n            list: randomCoffeeShops,\n            map: api.getRadiusMap(location, randomCoffeeShops)\n          }\n        })\n      }\n    })\n    .catch((error) => {\n      // if an error occurs during the api call display an alert\n      Swal.fire({\n        title: 'No response',\n        text: 'Try searching again later sir.',\n        icon: 'warning',\n        confirmButtonText: 'Okay',\n      });\n    });\n}","export const SET_LIBRARY = 'SET_LIBRARY';\nexport const GET_COFFEE_SHOPS = 'GET_COFFEE_SHOPS';\nexport const SET_DIRECTIONS_INSTRUCTIONS = 'SET_DIRECTIONS_INSTRUCTIONS';\nexport const CLEAR_SESSION_ID = 'CLEAR_SESSION_ID';\nexport const SET_DIRECTIONS_LOCATION = 'SET_DIRECTIONS_LOCATION';\nexport const SET_DIRECTIONS_MODE = 'SET_DIRECTIONS_MODE';","import React, { Component } from 'react';\nimport Swal from 'sweetalert2';\nimport * as api from '../api';\n\nimport { connect } from 'react-redux';\nimport { getCoffeeShops } from '../actions/libraryActions';\nclass Form extends Component {\n  constructor() {\n    super();\n    this.state = {\n      libraryInput: \"\",\n      selectedLibrary: \"\",\n      selectedRadius: 5,\n      autoComplete: [],\n      showSuggestions: false\n    }\n  }\n\n  // method to handle library input change\n  handleLibraryInputChange = (event) => {\n    // if auto complete list is not showing update state to true\n    if (!this.state.showSuggestions) {\n      this.setState({ showSuggestions: true });\n    }\n\n    // store user input to set in state\n    const libraryInput = event.target.value;\n\n    // update state with the libraryInput\n    // then call api to get search ahead (predictive) results\n    this.setState({ libraryInput }, this.getPredictiveSearch);\n  };\n\n  // handle the user's input for the selected distance (radius)\n  handleRadiusSelected = (event) => {\n    const selectedRadius = event.target.value;\n    this.setState({\n      selectedRadius,\n    });\n  };\n\n  // make api call to get prective search of user's search input\n  getPredictiveSearch = () => {\n    const { libraryInput } = this.state;\n\n    if (libraryInput.length >= 3 && libraryInput.length < 25) {\n\n      api.getPredictiveSearch(libraryInput)\n        .then((res) => {\n          //update autoComplete state with the returned search ahead results\n          this.setState({ autoComplete: [...res.data.results] });\n        })\n        .catch(error => {\n          // if there's an error with the api call display an alert\n          Swal.fire({\n            title: 'Oops!',\n            text: `There was an error! ${error}. Try searching at a later time.`,\n            icon: 'warning',\n            confirmButtonText: 'OK',\n          })\n        })\n    } else if (libraryInput.length < 3) {\n      // if libraryInput is less than 3 hide the autocomplete results\n      this.setState({ showSuggestions: false });\n    }\n  }\n\n  // method to handle user submitting the library name and distance to find surrounding coffee shops\n  handleFormSubmit = (event) => {\n    // prevent form from refreshing page on submit\n    event.preventDefault();\n\n    const { autoComplete, libraryInput, selectedLibrary, selectedRadius } = this.state;\n\n    // if user's libraryInput is less than 3 characters display an alert\n    if (libraryInput.length < 3) {\n      Swal.fire({\n        title: 'No results',\n        text: 'Library name must be greater than 3 characters.',\n        icon: 'warning',\n        confirmButtonText: 'Okay',\n      })\n    }\n\n    // if there are no autoComplete results OR the selected radius distance is less than 1 or greater than 20\n    // display an alert\n    if (autoComplete.length === 0 || selectedRadius < 1 || selectedRadius > 20) {\n      Swal.fire({\n        title: 'No results',\n        text: 'Try another search.',\n        icon: 'warning',\n        confirmButtonText: 'Okay',\n      })\n    }\n\n    const library = {\n      ...selectedLibrary,\n      radius: selectedRadius\n    }\n\n    this.props.dispatch({\n      type: 'SET_LIBRARY',\n      payload: library\n    })\n\n    this.setState({ showSuggestions: false}, () => {\n      this.props.dispatch(getCoffeeShops(this.props.library))\n    });    \n  };\n\n  // method to handle the user selecting (onClick) an autocomplete result\n  handleLibraryInputSelected = (event) => {\n    // store the value of the autocomplete for later\n    const userSelectedLibrary = event.target.value;\n\n    // map over the autoComplete array in state to return the properties of the userSelectedLibrary\n    const [ library ] = this.state.autoComplete.filter((item) => item.name === userSelectedLibrary);\n\n    // gather ther library's name, latitude, and longitude to be used for location searching\n    const { name  } = library;\n    const [ longitude, latitude ] = library.place.geometry.coordinates;\n\n    // store the library's name, latitude, and longitude in object\n    const selectedLibrary = {\n      name,\n      latitude,\n      longitude,\n    };\n\n    this.setState({ \n      libraryInput: name, \n      selectedLibrary,\n      showSuggestions: false\n    })\n    \n  };\n  \n  render() {\n    const { handleLibraryInputChange, handleRadiusSelected, handleFormSubmit, handleLibraryInputSelected } = this;\n    const { libraryInput, selectedRadius, showSuggestions, autoComplete } = this.state;\n\n    return (\n      <form id='form' action='submit'>\n        <div className='formTopSection'>\n\n          <label htmlFor='inputLocation'>Find Library</label>\n          <div className='inputLocationContainer'>\n            <input\n              type='text'\n              id='inputLocation'\n              className='inputLocation'\n              value={libraryInput}\n              onChange={handleLibraryInputChange}\n              placeholder=''\n              autoComplete='off'\n            />\n\n            {/* displaying autocomplete results / event handler on click */}\n            {showSuggestions &&\n            // if showSuggestions is true then display the list of autoCompleteResults\n              <ul className='inputLocationAutoComplete'>\n                {\n                  autoComplete.map((results) => {\n                    return (\n                      <li key={results.id} className='autoCompleteResults'>\n                        <button\n                          type='button'\n                          key={results.id}\n                          onClick={handleLibraryInputSelected}\n                          value={results.name}\n                        >\n                          {results.name}\n                        </button>\n                      </li>\n                    );\n                  })\n                }\n              </ul>}\n          </div>\n        </div>\n\n        <div className='formBottomSection'>\n          <label htmlFor='inputRadius'>Maximum distance <span>(1 - 20km)</span></label>\n          <input\n            type='number'\n            id='inputRadius'\n            className='inputRadius'\n            min='0'\n            max='20'\n            value={selectedRadius}\n            onChange={handleRadiusSelected}\n            placeholder=''\n            autoComplete='off'\n            required\n          />\n\n        <button className='formSubmitButton' type='submit' onClick={handleFormSubmit}>Go</button>\n\n        </div>\n\n      </form>\n    );\n  }\n}    \n\nconst mapStateToProps = state => ({\n  library: state.library,\n  coffeeShops: state.coffeeShops.list\n})\n\nexport default connect(mapStateToProps)(Form);\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer>\n      <div className='wrapper footerFlex'>\n        <div className='creators'>\n          <p>\n            Created by Andre Facey + Connie Tsang + Kristen Delorey + Raphael Roques at <a href='https://junocollege.com/'>Juno College</a>\n          </p>\n        </div>\n        <div className='photoCredit'>\n          <p>Image by Thomas Park / Unsplash</p>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n                    ","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({\n  coffeeShops: state.coffeeShops.list,\n  library: state.library\n})\n\nconst CoffeeShopsList = (props) => {\n  const { coffeeShops, handleCoffeeShopSelected } = props\n\n  return (      \n    <div className='coffeeShops'>\n      <h2>Coffee Shops In The Area</h2>\n      <ol className='coffeeShopsContainer'>\n        {\n          coffeeShops.map((results, index) => {\n            return (\n              <li key={results.id}>\n                <button\n                  className='coffeeShopButton'\n                  type='button'\n                  key={results.id}\n                  onClick={handleCoffeeShopSelected}\n                  \n                  value={results.id}>\n                    <div className='coffeeShopNumber'><p>{index + 1}</p></div>\n                    <div className='coffeeShopText'>\n                      <h3>{results.name}</h3>\n                      <p>{results.place.properties.street}</p>\n                    </div>\n                </button>\n              </li>\n            );\n          })\n        }\n      </ol>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps)(CoffeeShopsList);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { SET_DIRECTIONS_MODE } from '../actions/types';\n\nconst mapStateToProps = state => ({\n\tdirections: state.directions\n});\n\nconst Directions = (props) => {\n\n\tconst { directions, handleBackButton } = props;\n\n\treturn (\n\t\t<div className='transportationAndDirections'>\n\t\t\t<button className='transportationButton' onClick={handleBackButton}>⬅ to Coffee Shops</button>\n\t\t\t<h2>Directions to {directions.location.name}</h2>\n\n\t\t\t<div className='directionMarkers' aria-hidden='true'>\n\t\t\t\t<div className='directionMarkerContainer'>\n\t\t\t\t\t<img src='https://assets.mapquestapi.com/icon/v2/marker-start.png' alt='' />\n\t\t\t\t\t<p>Start</p>\n\t\t\t\t</div>\n\t\t\t\t<div className='directionMarkerContainer'>\n\t\t\t\t\t<img src='https://assets.mapquestapi.com/icon/v2/marker-end.png' alt=''/>\n\t\t\t\t\t<p>End</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div className='modeOfTransportationInputContainer'>\n\t\t\t\t<label htmlFor='modeOfTransportation'>Choose a mode of transportation:</label>\n\t\t\t\t<select id='modeOfTransportation' value={directions.mode} onChange={(e) => props.dispatch({ type: SET_DIRECTIONS_MODE, payload: e.target.value})}>\n\t\t\t\t\t<option value='fastest'>Drive</option>\n\t\t\t\t\t<option value='pedestrian'>Walk</option>\n\t\t\t\t\t<option value='bicycle'>Bike</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\n\t\t\t<ol className='directionsToCoffeeShopOl'>\n\t\t\t\t{/* map over directions array to display ordered list of coffee shop directions */}\n\t\t\t\t{directions.instructions.map((direction, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li key={index}>\n\t\t\t\t\t\t\t\t{direction}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ol>\n\t\t</div>\n\t)\n};\n\nexport default connect(mapStateToProps)(Directions);","import React, { Component } from 'react'\nimport CoffeeShopsList from './CoffeeShopsList';\nimport Directions from './Directions'\nimport Swal from 'sweetalert2';\nimport * as api from '../api';\n\nimport { connect } from 'react-redux';\nimport { SET_DIRECTIONS_INSTRUCTIONS, SET_DIRECTIONS_LOCATION } from '../actions/types';\nimport { arraysAreEqual } from '../helpers';\n\nconst mapStateToProps = state => ({\n  coffeeShops: state.coffeeShops.list,\n  radiusMap: state.coffeeShops.map,\n  directionsMap: state.directions.map,\n  selectedLibrary: state.library,\n  selectedCoffeeShop: state.directions.location,\n  modeType: state.directions.mode,\n})\n\nclass Results extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      displayDirections: false,\n      isLoading: true, // detect whether map is loading for spinner\n    }\n  }\n  \n  componentDidUpdate(prevProps) {\n    \n    if (prevProps.modeType !== this.props.modeType || JSON.stringify(prevProps.selectedCoffeeShop) !== JSON.stringify(this.props.selectedCoffeeShop)) {\n      this.setState({ isLoading: true }, this.getSelectedTransportation);\n    }\n\n    \n    if (arraysAreEqual(prevProps.coffeeShops, this.props.coffeeShops) === false) {\n      this.setState({ displayDirections: false, isLoading: true })\n    }\n\n    if (this.props.coffeeShops && this.props.coffeeShops.length > 0) {\n      const mapAndResults = document.querySelector('#mapAndResults');\n      mapAndResults.scrollIntoView();\n    }\n\n  }\n\n  // handle button click to go back to the list of surrounding coffeeShops\n  handleBackButton = () => this.setState({ displayDirections: false});\n\n  // handle when the user selects a coffee shop from the list to get the directions\n  handleCoffeeShopSelected = (event) => {\n    const selectedLocationId = event.currentTarget.value;\n\n    const selectedLocation = this.props.coffeeShops.reduce((locationObj, locationListItem) => {\n      if (locationListItem.id === selectedLocationId) {\n        locationObj = {\n          name: locationListItem.name,\n          longitude: locationListItem.place.geometry.coordinates[0],\n          latitude: locationListItem.place.geometry.coordinates[1],\n        }\n      }\n\n      return locationObj;\n    }, {})\n    \n    // if the selected location was previously loaded in state, just display the directions to prevent an unnecssary api call\n    if (JSON.stringify(selectedLocation) === JSON.stringify(this.props.selectedCoffeeShop)) {\n      this.setState({ displayDirections: true })\n      return;\n    }\n\n    this.props.dispatch({type: SET_DIRECTIONS_LOCATION, payload: selectedLocation})\n\n  }\n\n  // getting directions from the selectedLibrary to the selectedCoffeeShop\n  getSelectedTransportation = async () => {\n    const { selectedLibrary, selectedCoffeeShop, modeType } = this.props;\n    // api request to grab directions from the selectedLibrary to the selectedCoffeeShop\n\n    try {\n      const results = await api.getSelectedTransportation(selectedLibrary, selectedCoffeeShop, modeType);\n\n      // store directions array from results\n      const directions = results.data.route.legs[0].maneuvers;\n\n      // map over directions array to get the narrative text of each direction\n      const directionsToCoffeeShop = directions.map(direction => {\n        return direction.narrative;\n      })\n\n      // store the sessionId of the api call to use for the map of directions\n      const directionsSessionID = results.data.route.sessionId;\n\n      this.props.dispatch({\n        type: SET_DIRECTIONS_INSTRUCTIONS,\n        payload: {\n          instructions: [...directionsToCoffeeShop],\n          session: directionsSessionID,\n          map: api.getDirectionsMap(directionsSessionID)\n        }\n      })\n\n      this.setState({ displayDirections: true });\n\n    } catch (err) {\n      Swal.fire({\n        title: 'Oops!',\n        text: 'There was an error retrieving the directions. Please try again later.',\n        icon: 'warning',\n        confirmButtonText: 'Okay',\n      });\n    }\n  }\n  \n  render() {\n    const { coffeeShops, radiusMap, directionsMap } = this.props;\n\n    return (\n      <>\n      {/* If there are coffeeShops then display the list of coffeeShops and the map */}\n      {\n        coffeeShops.length > 0 \n        ?\n        <div className='mapAndCoffeeShopBackground' id='mapAndResults'>\n          <div className='mapAndCoffeeShopContainer wrapper'>\n            <div className='map'>\n              {/* If state isLoading then display loader...otherise display the map */}\n              {\n                this.state.isLoading && <div className='spinnerContainer'><div className='loadingSpinner'></div></div> \n              }\n              <img \n                src={this.state.displayDirections ? directionsMap : radiusMap} \n                onLoad={() => this.setState({isLoading: false})} \n                alt='map of selected library and coffee shops' \n              />\n            </div>\n            \n            { \n              this.state.displayDirections \n                ? <Directions handleBackButton={this.handleBackButton}/>  \n                : <CoffeeShopsList handleCoffeeShopSelected={this.handleCoffeeShopSelected}/>\n            } \n\n          </div>\n        </div>\n        : \n        null\n      }\n      </>\n    )\n  }\n}\n\nexport default connect(mapStateToProps)(Results);\n","export function arraysAreEqual(arr1, arr2) {\n  if (!Array.isArray(arr1) || !Array.isArray(arr2)) return false;\n  if (arr1.length !== arr2.length) return false;\n\n  for(let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false\n    }\n  }\n\n  return true;\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Instructions from './components/Instructions';\nimport Form from './components/Form';\nimport Footer from './components/Footer';\n\nimport Results from './components/Results';\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className='App'>\n        <a href='#form' className='skipLink'>Skip to main</a>\n        <Header />\n        <main className='mainContainer'>\n          <div className='wrapper'>\n            <Instructions />\n            <Form/>\n          </div>\n\n          <Results />\n\n        </main>\n        <Footer />\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_LIBRARY } from \"../actions/types\";\n\nconst initialState = {\n  name: '',\n  latitude: '',\n  longitude: '',\n  radius: ''\n}\n\nconst libraryReducer = (state = initialState, action) => {\n\n  switch (action.type) {\n    case SET_LIBRARY:\n      return action.payload\n    default:\n      return state;\n  }\n}\n\nexport default libraryReducer;","import { GET_COFFEE_SHOPS } from '../actions/types';\n\nconst initialState = {\n  list: [],\n  map: '',\n}\n\nconst coffeeShopsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COFFEE_SHOPS:\n      return action.payload\n    default:\n      return state;\n  }\n}\n\nexport default coffeeShopsReducer;","import { SET_DIRECTIONS_INSTRUCTIONS, SET_DIRECTIONS_LOCATION, SET_DIRECTIONS_MODE } from '../actions/types';\n\nconst initialState = {\n  session: '',\n  location: {},\n  map: '',\n  instructions: [],\n  mode: 'fastest'\n}\n\nconst directionsReducer = (state = initialState, action) => {\n\n  switch(action.type) {\n    case SET_DIRECTIONS_INSTRUCTIONS:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case SET_DIRECTIONS_LOCATION:\n      return {\n        ...state,\n        location: action.payload\n      }\n    case SET_DIRECTIONS_MODE:\n      return {\n        ...state,\n        mode: action.payload\n      }\n    default:\n      return state;\n  }\n}\n\nexport default directionsReducer","import { combineReducers } from 'redux';\nimport libraryReducer from './libraryReducer';\nimport coffeeShopsReducer from './coffeeShopsReducer';\nimport directionsReducer from './directionsReducer';\n\nconst rootReducer = combineReducers({\n  library: libraryReducer,\n  coffeeShops: coffeeShopsReducer,\n  directions: directionsReducer\n})\n\nexport default rootReducer;","import { applyMiddleware, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst initialState = {};\nconst middleware = [ thunk ];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, initialState, composeEnhancers(applyMiddleware(...middleware)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}